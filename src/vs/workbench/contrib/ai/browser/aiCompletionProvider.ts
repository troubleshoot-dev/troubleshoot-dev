/*---------------------------------------------------------------------------------------------
 *  Copyright (c) troubleshoot.dev. All rights reserved.
 *  Licensed under the MIT License.
 *--------------------------------------------------------------------------------------------*/

import { CancellationToken } from 'vs/base/common/cancellation';
import { IDisposable } from 'vs/base/common/lifecycle';
import { Position } from 'vs/editor/common/core/position';
import { ITextModel } from 'vs/editor/common/model';
import { CompletionContext, CompletionItem, CompletionItemKind, CompletionList, CompletionItemProvider } from 'vs/editor/common/languages';
import { IAIService } from 'vs/workbench/contrib/ai/common/aiService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ILogService } from 'vs/platform/log/common/log';

export class AICompletionProvider implements CompletionItemProvider {
	
	constructor(
		@IAIService private readonly aiService: IAIService,
		@IConfigurationService private readonly configurationService: IConfigurationService,
		@ILogService private readonly logService: ILogService
	) {}

	async provideCompletionItems(
		model: ITextModel,
		position: Position,
		context: CompletionContext,
		token: CancellationToken
	): Promise<CompletionList | undefined> {
		
		// Check if AI completion is enabled
		const config = this.configurationService.getValue<any>('troubleshoot.ai');
		if (!config?.completion?.enabled) {
			return undefined;
		}

		// Check if AI service is available
		if (!this.aiService.isAvailable()) {
			return undefined;
		}

		// Don't provide completions for certain trigger characters
		if (context.triggerCharacter && [' ', '\n', '\t'].includes(context.triggerCharacter)) {
			return undefined;
		}

		try {
			const aiContext = {
				filePath: model.uri.path,
				language: model.getLanguageId(),
				content: model.getValue(),
				cursorPosition: {
					line: position.lineNumber,
					column: position.column
				}
			};

			const completions = await this.aiService.complete(aiContext);
			
			const items: CompletionItem[] = completions.map((completion, index) => ({
				label: `AI: ${completion.text.split('\n')[0].substring(0, 50)}...`,
				kind: CompletionItemKind.Text,
				detail: 'AI Suggestion',
				documentation: 'Generated by AI based on context',
				insertText: completion.text,
				range: completion.range ? {
					startLineNumber: completion.range.startLine,
					startColumn: completion.range.startColumn,
					endLineNumber: completion.range.endLine,
					endColumn: completion.range.endColumn
				} : undefined,
				sortText: `0000${index}`, // High priority
				filterText: completion.text,
				preselect: index === 0, // Preselect first suggestion
				command: {
					id: 'troubleshoot.ai.logCompletion',
					title: 'Log AI Completion',
					arguments: [completion]
				}
			}));

			return {
				suggestions: items,
				incomplete: false
			};

		} catch (error) {
			this.logService.error('AI completion failed', error);
			return undefined;
		}
	}

	get triggerCharacters(): string[] {
		return ['.', '(', '[', '{', ' ', '\n'];
	}
}